#!/bin/bash
source "${RF_REPOS_DIR:-~/.Runfile}/Runfile.template" # MUST_START_OF_FILE
##regison USER ===================================================
RF_FN_SKIP_PREFIX=""
#import log.sh to test functions
source log.sh

mergetomaster() {
	git checkout master &&
	git merge dev &&
	git push origin master &&
	git checkout dev
}
logtofile() {
	log_to_file "/tmp/abc.log"
	log "this is my log"
	log "this is second log"
}

step() {
	clear
	# Save cursor position
    tput sc
    # Add a new line
    tput il 1
    # Change scroll region to exclude the last lines
    tput csr 0 $(($(tput lines) - 3))
    # Move cursor to bottom line
    tput cup $(tput lines) 0
    # Clear to the end of the line
    tput el
    # Echo the content on that row
    echo -en "Step 1/10:......"
    # Restore cursor position
    tput rc
	
	for i in $(seq 1 100); do
		echo "i=$i"
		if [[ $(( $i % 10 )) -eq 0 ]]; then
			tput sc
			# tput il 1
			# tput csr 0 $(($(tput lines) - 3))
			tput cup $(tput lines) 0
			# tput el
			echo -en "Step $(( i / 10 + 1 ))/10:......$i"
			tput rc
		fi 
		sleep 0.5
	done


}
# parse input value to get optional and default input value
# below: option: suffix, prefix, line_width and main value is str
targs() {
	while [[ $# -gt 0 ]]; do
		case $1 in 
		--suffix) shift; suffix=$1; echo "got suffix: $1";;
		--prefix) shift; prefix=$1; echo "got prefix: $1";;
		--line_width) shift; line_width=$1; echo "got line_width: $1";;
		*) str="$1"; echo "got str: $1";;
		esac
		shift
	done
	#
	echo -e "got: suffix: $suffix, prefix: $prefix, line_width: $line_width, str: \"$str\""
}

tlog() {
	log "log with default"
	log_empty
	log "log with prefix=** " --prefix "** "
	log_empty
	log "log with suffix=-- " --suffix "-- "
	log_empty
	log "log with line_width=100, suffix=#" --line_width 100 --suffix "#"
	log_empty
	log "log with line_width=100, suffix=#, padding_str=_ " --line_width 100 --suffix "#" --padding_str "_"
	log_empty
	log "this is header from log fn" --header
	log "this is header without bold" --header --no-bold
	log "this is header from log fn - again. using switch -hr" -hr
	log --empty
	log --title "i am a title" "i am a content of title log, calling from log fn"
	log -e
	log -t "i am a title by -t" "i am a content of title log, calling from log fn"
	log --warning "this is warning"
	log --error "this is error"
	log --info "this is info"
	log --debug "this is debug"
	
}
tlogheader() {
	log_header "log_header with default"
	log_end
	log_header "log_header with prefix=** " --prefix "** "
	log_end
	log_header "log_header with suffix=-- " --suffix "-- "
	log_end
	log_header "log_header with line_width=100, suffix=#" --line_width 100 --suffix "#"
	log_end
	log_header "log_header with line_width=100, suffix=#, padding_str=_ " --line_width 100 --suffix "#" --padding_str "_"
}
tlogtitle() {
	log_title "log_title with default" --title "i am a title"
	log_empty
	log_title "log_title with prefix=** " --prefix "** " --title "i am a title"
	log_empty
	log_title "log_title with suffix=-- " --suffix "-- " --title "i am a title"
	log_empty
	log_title "log_title with line_width=100, suffix=#" --line_width 100 --suffix "#" --title "i am a title"
	log_empty
	log_title "log_title with line_width=100, suffix=#, padding_str=_ " --line_width 100 --suffix "#" --padding_str "_" --title "i am a title"
}

tlogstep() {
	log_step "Processing steps"
	log_step "Step 1: downloading..."
	for i in $( seq 1 5 );do
		log "downloading package $i..."
		sleep 1
	done
	log_step_result "downloaded all package"
	log_step "Step 2: compiling..."
	for i in $( seq 1 5 );do
		log "compiling package $i..."
		sleep 1
	done
	log_step_result "compiled all package"
	log_step "Step 3: installing..."
	for i in $( seq 1 5 );do
		log "installing package $i..."
		sleep 1
	done
	log_step_result "installed all package"
}

tlogtextstyle() {
	
	log "this is <b>bold</b> text <i>here</i> another"
	log "this is <i>italic</i> text"
	log "this is <u>underline</u> text"
	log "this is <s>strikethrough</s> text"
}
##endregion USER =================================================
__start_app "$@" # MUST_END_OF_FILE
